name: Build

on:
  push:
    branches:
      - main
      - v-next
  pull_request:
    branches:
      - main
      - v-next

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '9.0.x' # Adjust the version as needed

    - name: Clean up previous builds
      run: dotnet clean src/AzUrlShortener.sln

    - name: Install .NET Aspire workload
      run: dotnet workload update && dotnet workload install aspire

    - name: Restore dependencies
      run: dotnet restore src/AzUrlShortener.sln

    - name: Build solution
      run: dotnet build src/AzUrlShortener.sln --no-restore --configuration Release
# Ihre vorhandenen Jobs (der "build"-Job) bleibt wie er ist.
# Wir fügen den Deployment-Job hinzu:

# --- Zusätzliche Umgebungsvariablen hinzufügen ---
env:
  AZURE_CONTAINER_REGISTRY: 'acr3c4cn3rgwaqwk' Ihre ACR
  CONTAINER_APP_NAME: 'admin'                 # Ihre Container App
  RESOURCE_GROUP: 'rg-AzUrlShortener'               # Ihre Ressourcengruppe
  IMAGE_NAME: 'azurlshortener-image'          # Name des Images

# --- Neuer Deployment-Job ---
jobs:
  build:
    # ... Ihr vorhandener Build-Code ...

  deploy:
    runs-on: ubuntu-latest
    needs: build # Stellt sicher, dass dieser Job nur nach einem erfolgreichen Build ausgeführt wird
    environment: Production
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    # 1. Azure Login (mit Service Principal oder OIDC-Secrets)
    - name: 'Login via Azure CLI'
      uses: azure/login@v1
      with:
        # HINWEIS: Ersetzen Sie dies durch Ihre tatsächlichen Secrets
        creds: ${{ secrets.AZURE_RBAC_CREDENTIALS }} 

    # 2. Docker Login bei der Azure Container Registry
    - name: 'Docker Login to ACR'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io
        username: ${{ secrets.REGISTRY_USERNAME }}
        password: ${{ secrets.REGISTRY_PASSWORD }}

    # 3. Docker Image bauen und taggen (NUTZT DIE DOCKERFILE IM ROOT!)
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}

    # 4. Deployment zur Azure Container App
    - name: 'Deploy to Azure Container Apps'
      uses: azure/container-apps-deploy-action@v1
      with:
        appSourcePath: '${{ github.workspace }}'
        containerAppName: ${{ env.CONTAINER_APP_NAME }}
        resourceGroup: ${{ env.RESOURCE_GROUP }}
        imageToDeploy: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ github.sha }}
        
    - name: Azure Logout
      run: az logout

